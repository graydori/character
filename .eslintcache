[{"/Users/snazirip/Code/character/src/App.js":"1","/Users/snazirip/Code/character/src/ObjectDetectionSketch.js":"2","/Users/snazirip/Code/character/src/reportWebVitals.js":"3","/Users/snazirip/Code/character/src/index.js":"4"},{"size":3171,"mtime":1612163011987,"results":"5","hashOfConfig":"6"},{"size":4930,"mtime":1610253834449,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1610072942876,"results":"8","hashOfConfig":"6"},{"size":500,"mtime":1610072942874,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"niv4kx",{"filePath":"12","messages":"13","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/snazirip/Code/character/src/App.js",[],"/Users/snazirip/Code/character/src/ObjectDetectionSketch.js",["19","20","21","22"],"import * as p5 from 'p5'\nimport \"p5/lib/addons/p5.dom\";\nimport * as cocoSsd from '@tensorflow-models/coco-ssd';\nimport * as faceapi from 'face-api.js';\n\nconst MODEL_URL = '/models'\n\nexport default function sketch(p) {\n    // Variables\n    // save current camera image\n    let capture = null;\n    // save cocossd Model\n    let cocossdModel = null;\n    // to save the result of cocossd and face-api results\n    let cocoDrawings = [];\n    let faceDrawings = [];\n\n    // Used to store the result of coco-ssd model\n    function showCocoSSDResults(results) {\n        const id = capture.id();\n        cocoDrawings = results;\n    }\n    // used to store the result for the face-api.js model\n    function showFaceDetectionData(data) {\n        faceDrawings = data;\n    }\n\n    // P5.js Functions\n    p.setup = async function () {\n        await faceapi.loadSsdMobilenetv1Model(MODEL_URL);\n        await faceapi.loadAgeGenderModel(MODEL_URL);\n        await faceapi.loadFaceExpressionModel(MODEL_URL);\n\n        p.createCanvas(1280, 720);\n        const constraints = {\n            video: {\n                mandatory: {\n                    minWidth: 1280,\n                    minHeight: 720\n                },\n                optional: [{ maxFrameRate: 10 }]\n            },\n            audio: false\n        };\n        capture = p.createCapture(constraints, () => { });\n        capture.id(\"video_element\");\n        capture.size(1280, 720);\n        capture.hide(); // this is require as we don't want to show the deafault video input\n\n        cocoSsd.load().then((model) => {\n            try {\n                cocossdModel = model;\n            } catch (e) {\n                console.log(e);\n            }\n        }).catch((e) => {\n            console.log(\"Error occured : \", e);\n        });\n\n    }\n    p.draw = function () {\n        p.background(255);\n        p.image(capture, 0, 0);\n        p.fill(0, 0, 0, 0);\n\n        cocoDrawings.map((drawing) => {\n            if (drawing) {\n                p.textSize(20);\n                p.strokeWeight(1);\n                const textX = drawing.bbox[0] + drawing.bbox[2];\n                const textY = drawing.bbox[1] + drawing.bbox[3];\n\n                const confidenetext = \"Confidence: \" + drawing.score.toFixed(1);\n                const textWidth = p.textWidth(confidenetext);\n\n                const itemTextWidth = p.textWidth(drawing.class);\n                p.text(drawing.class, textX - itemTextWidth - 10, textY - 50);\n                p.text(confidenetext, textX - textWidth - 10, textY - 10);\n                p.strokeWeight(4);\n                p.stroke('rgb(100%,100%,100%)');\n                p.rect(drawing.bbox[0], drawing.bbox[1], drawing.bbox[2], drawing.bbox[3]);\n            }\n        });\n\n        faceDrawings.map((drawing) => {\n            if (drawing) {\n                p.textSize(15);\n                p.strokeWeight(1);\n                const textX = drawing.detection.box._x + drawing.detection.box._width;\n                const textY = drawing.detection.box._y + drawing.detection.box._height;\n\n                const confidenetext = \"Gender: \" + drawing.gender;\n                const textWidth = p.textWidth(confidenetext);\n                p.text(confidenetext, textX - textWidth, textY - 60);\n                const agetext = \"Age: \" + drawing.age.toFixed(0);\n                const ageTextWidth = p.textWidth(agetext);\n                p.text(agetext, textX - ageTextWidth, textY - 30);\n                const copiedExpression = drawing.expressions;\n                const expressions = Object.keys(copiedExpression).map((key) => {\n                    const value = copiedExpression[key];\n                    return value;\n                })\n                const max = Math.max(...expressions);\n\n                const expression_value = Object.keys(copiedExpression).filter((key) => {\n                    return copiedExpression[key] === max;\n                })[0];\n                const expressiontext = \"Mood: \" + expression_value;\n                const expressionWidth = p.textWidth(expressiontext);\n                p.text(expressiontext, textX - expressionWidth, textY - 10);\n\n                p.strokeWeight(4);\n                p.stroke('rgb(100%,0%,10%)');\n                p.rect(drawing.detection.box._x, drawing.detection.box._y, drawing.detection.box._width, drawing.detection.box._height);\n            }\n        });\n        faceapi.detectAllFaces(capture.id())\n            .withAgeAndGender()\n            .withFaceExpressions()\n            .then((data) => {\n                showFaceDetectionData(data);\n            });\n        if (capture.loadedmetadata) {\n            if (cocossdModel) {\n                cocossdModel\n                    .detect(document.getElementById(\"video_element\"))\n                    .then(showCocoSSDResults)\n                    .catch((e) => {\n                        console.log(\"Exception : \", e);\n                    });\n            }\n        }\n\n    }\n\n}","/Users/snazirip/Code/character/src/reportWebVitals.js",[],"/Users/snazirip/Code/character/src/index.js",[],{"ruleId":"23","severity":1,"message":"24","line":2,"column":13,"nodeType":"25","messageId":"26","endLine":2,"endColumn":15},{"ruleId":"23","severity":1,"message":"27","line":21,"column":15,"nodeType":"25","messageId":"26","endLine":21,"endColumn":17},{"ruleId":"28","severity":1,"message":"29","line":67,"column":36,"nodeType":"30","messageId":"31","endLine":67,"endColumn":38},{"ruleId":"28","severity":1,"message":"29","line":86,"column":36,"nodeType":"30","messageId":"31","endLine":86,"endColumn":38},"no-unused-vars","'p5' is defined but never used.","Identifier","unusedVar","'id' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside"]